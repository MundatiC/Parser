 %{
import java.io.StringReader;
import java.util.Scanner;
import java.util.zip.*;
import java.io.Reader;

%}

%class Prolog
%interface PrologToken
%semantic String : yylval
%get token
%next yylex()

%token CHAR INTEGER  CHARR '.' '(' ')' '?' ',' ':' '-' SYMBOLS


%%

program : clauselist { System.out.println("Parsed clause: " + $1); }
        | query  { System.out.println("Parsed clause: " + $1); }
        ;
clauselist : clause 
           | clauselist clause 
           ;


clause : predicate
       '.' 
       | predicate 
       ':''-' 
       predicatelist
       '.'
       ;

predicatelist : predicate
              | predicatelist
              ','
              predicate
           ;

predicate : atom
          | atom
          '(' 
          termlist
          ')'
          ;

termlist : term
         | termlist 
         ',' 
         term
         ;

term : numeral
     | atom 
     | variable
     | structure
     ;

structure : atom
          '(' 
          termlist
          ')'
          ;

query :
      '?'
      '-' 
      predicatelist
      '.'
      ;

atom : smallatom
     | 
     '"' string
     '"'
     ;

smallatom : lowercaseletter
          | smallatom character
          ;

variable : uppercaseletter
         | variable character
         ;

lowercaseletter : CHARR
                ;

uppercaseletter : CHAR
                ;


numeral : digit
        | numeral digit
        ;

digit : INTEGER
      ;

character : lowercaseletter
          | uppercaseletter
          | digit 
          | special
          ;

special :SYMBOLS;
string : character
         | string character
         ;

%%


private void yyerror(String msg) {
    System.out.println("ERROR: " + msg);
}

private int c;

/** Read a single input character from standard input.
*/
private void nextChar() {
if (c>=0) {
    try {
        c = System.in.read();
    } catch (Exception e) {
        c = (-1);
    }
}
}

int token;
String yylval;

int yylex() {
for (;;) {
// Skip whitespace
while (c==' '||c=='\n'|| c=='\t'||c=='\r') {
  nextChar();
}
if (c<0) {
  return (token=ENDINPUT);
}
switch (c) {
case '.' : 
    nextChar();
    return token='.';
case ',' : 
    nextChar();
    return token=',';
case '(' : 
    nextChar();
    return token='(';
case ')' : 
    nextChar();
    return token = ')';
case '?' : 
    nextChar();
    return token = '?';
case '-' : 
    nextChar();
    return token = '-';
case ':' :
    nextChar();
    return token = ':';
default:
                if (Character.isLetter((char)c)) {
                    StringBuilder sb = new StringBuilder();
                    do {
                        sb.append((char)c);
                        nextChar();
                    } while (Character.isLetterOrDigit((char)c) || c == '_'); 

                    yylval = sb.toString();
                   
                        return token=CHAR;
     
                } else {
                    yyerror("Illegal character "+c);
                    nextChar();
                }
        
}
}
}

public void setInput(Reader reader) {
    yylval = null;
    
}



  public static void main(String[] args) {
    Prolog parser = new Prolog();
    Scanner scanner = new Scanner(System.in);

  while (true) {
    System.out.print("Enter query or clause(or EOF to exit): ");
    String input = scanner.nextLine();
    if (input == null || input.isEmpty()) {
        break;
    }
    parser.setInput(new StringReader(input));
    parser.nextChar();
    parser.yylex();
    parser.parse();
    
}

  }



